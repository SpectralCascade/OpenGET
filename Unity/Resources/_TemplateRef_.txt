using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

/// <summary>
/// Generated direct access to assets in Unity Resources.
/// DO NOT MODIFY THIS SCRIPT.
/// </summary>
public class _TemplateRef_
{

    public abstract class Node
    {
        protected readonly Dictionary<string, WrapperBase> mapped = new Dictionary<string, WrapperBase>();
        protected readonly Node[] children = new Node[0];

		public Node(Dictionary<string, WrapperBase> map, Node[] children) { mapped = map; this.children = children; }

		/// <summary>
		/// Try and find an asset by id. Returns null on failure.
		/// </summary>
		/// <typeparam name="T">Asset type.</typeparam>
		/// <param name="id">Identifier of the asset - this is the filename without extension.</param>
		/// <param name="recursive">Search child folders recursively.</param>
        public Wrapper<T> Find<T>(string id, bool recursive = true) where T : UnityEngine.Object, OpenGET.IReferrable
        {
            Wrapper<T> found = mapped.TryGetValue(id, out WrapperBase wrapper) ? wrapper as Wrapper<T> : null;
            if (found == null && recursive)
            {
				for (int i = 0, counti = children.Length; i < counti; i++)
				{
					found = children[i].Find<T>(id, recursive);
					if (found != null)
					{
						break;
					}
				}
            }
            return found;
        }
    }

    public abstract class WrapperBase {
    }

    public sealed class Wrapper<T> : WrapperBase where T : Object
    {
        public Wrapper(string path) { this.path = path; }

        public string name => Data?.ToString();

        public readonly string path = "";
        
        public T Data => Resources.Load<T>(path);
        
		public static implicit operator T(Wrapper<T> wrapper) => wrapper.Data;
		
		public static implicit operator CharacterSimulant(Wrapper<T> wrapper) => (wrapper.Data as CharacterData)?.Sim;

        public override string ToString() { return name; }

        public string Uppercase => ToString().ToUpper();

        public string Lowercase => ToString().ToLower();
    }

    /// <summary>
    /// Dictionary of asset paths to loaded assets.
    /// </summary>
    public static readonly Dictionary<string, OpenGET.Referrable> _loaded = new Dictionary<string, OpenGET.Referrable>();

    #region __GENERATED_CLASSES__
    #endregion

}
